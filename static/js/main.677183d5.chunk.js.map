{"version":3,"sources":["constants/SiteConfig.ts","components/Navigation.tsx","containers/App.tsx","serviceWorker.js","index.tsx"],"names":["config","siteTitle","siteTitleShort","siteTitleAlt","siteLogo","siteUrl","repo","pathPrefix","dateFromFormat","dateFormat","siteDescription","siteRss","googleAnalyticsID","postDefaultCategoryID","newsletter","newsletterEmbed","userName","userEmail","userTwitter","menuLinks","name","link","themeColor","backgroundColor","replace","substr","slice","Navigation","props","navOnScroll","window","scrollY","setState","scrolled","state","addEventListener","this","removeEventListener","className","role","aria-label","id","href","title","aria-expanded","aria-hidden","map","key","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAAMA,G,MAAS,CACXC,UAAW,eACXC,eAAgB,eAChBC,aAAc,eACdC,SAAU,uBACVC,QAAS,8BACTC,KAAM,iDACNC,WAAY,GACZC,eAAgB,GAChBC,WAAY,GACZC,gBACE,sIACFC,QAAS,WACTC,kBAAmB,GACnBC,sBAAuB,OACvBC,WAAY,mCACZC,gBAAiB,yCACjBC,SAAU,cACVC,UAAW,2BACXC,YAAa,aACbC,UAAW,CACT,CACEC,KAAM,OACNC,KAAM,QAER,CACED,KAAM,WACNC,KAAM,cAER,CACED,KAAM,QACNC,KAAM,WAER,CACED,KAAM,UACNC,KAAM,aAER,CACED,KAAM,WACNC,KAAM,eAGVC,WAAY,UACZC,gBAAiB,YAIO,MAAtBvB,EAAOO,WACTP,EAAOO,WAAa,GAGpBP,EAAOO,WAAP,WAAwBP,EAAOO,WAAWiB,QAAQ,WAAY,KAI9B,MAA9BxB,EAAOK,QAAQoB,QAAQ,KAAYzB,EAAOK,QAAUL,EAAOK,QAAQqB,MAAM,GAAI,IAG7E1B,EAAOW,SAAiC,MAAtBX,EAAOW,QAAQ,KAAYX,EAAOW,QAAP,WAAqBX,EAAOW,UAEhEX,Q,2CCWA2B,G,kBA1DX,WAAYC,GAAW,IAAD,8BAClB,4CAAMA,KAcVC,YAAc,WACNC,OAAOC,QAAU,GACnB,EAAKC,SAAS,CAAEC,UAAU,IAE1B,EAAKD,SAAS,CAAEC,UAAU,KAjB5B,EAAKC,MAAQ,CACVD,UAAU,GAHK,E,iFAQlBH,OAAOK,iBAAiB,SAAUC,KAAKP,e,6CAIvCC,OAAOO,oBAAoB,SAAUD,KAAKP,e,+BAarBO,KAAKF,MAAlBD,SAFF,IAGEd,EAAciB,KAAKR,MAAnBT,UAER,OACI,oCACI,yBAAKmB,UAAU,aACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,oBAAoBC,KAAK,aAAaC,aAAW,mBAChE,yBAAKF,UAAU,gBACX,uBAAGG,GAAG,cAAcH,UAAU,cAAcI,KAAK,kCAAkCC,MAAM,aAAY,+CACrG,uBAAGJ,KAAK,SAASD,UAAU,gBAAgBE,aAAW,OAAOI,gBAAc,SACvE,0BAAMC,cAAY,SAClB,0BAAMA,cAAY,SAClB,0BAAMA,cAAY,WAG1B,yBAAKP,UAAU,eACX,yBAAKA,UAAU,cAEXnB,EAAU2B,KAAI,SAAAzB,GAAI,OACd,uBAAGiB,UAAU,qBAAqBS,IAAK1B,EAAKD,KAAMsB,KAAMrB,EAAKA,MAAQA,EAAKD,mB,GA/CrF4B,cCGVC,MATf,WAEM,OACM,oCACA,kBAAC,EAAD,CAAY9B,UAAcnB,EAAOmB,cCGzB+B,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.677183d5.chunk.js","sourcesContent":["const config = {\n    siteTitle: 'Mudassar Ali',\n    siteTitleShort: 'Mudassar Ali',\n    siteTitleAlt: 'Mudassar Ali',\n    siteLogo: '/logos/logo-1024.png',\n    siteUrl: 'https://www.mudassarali.com',\n    repo: 'https://github.com/mudassar045/mudassarali.com',\n    pathPrefix: '',\n    dateFromFormat: '',\n    dateFormat: '',\n    siteDescription:\n      'Mudassar Ali is full-stack developer currently working with JavaScript and elixir. Changing imaginations into reality through code.',\n    siteRss: '/rss.xml',\n    googleAnalyticsID: '',\n    postDefaultCategoryID: 'Tech',\n    newsletter: 'https://mudassarali.substack.com',\n    newsletterEmbed: 'https://mudassarali.substack.com/embed',\n    userName: 'MudassarAli',\n    userEmail: 'mudassar@mudassarali.com',\n    userTwitter: 'voidwebdev',\n    menuLinks: [\n      {\n        name: 'Home',\n        link: '/me/',\n      },\n      {\n        name: 'Projects',\n        link: '/projects/',\n      },\n      {\n        name: 'About',\n        link: '/about/',\n      },\n      {\n        name: 'Contact',\n        link: '/contact/',\n      },\n      {\n        name: 'Articles',\n        link: '/articles/',\n      },\n    ],\n    themeColor: '#3F80FF', // Used for setting manifest and progress theme colors.\n    backgroundColor: '#ffffff',\n  } as Config\n  \n  // Make sure pathPrefix is empty if not needed\n  if (config.pathPrefix === '/') {\n    config.pathPrefix = ''\n  } else {\n    // Make sure pathPrefix only contains the first forward slash\n    config.pathPrefix = `/${config.pathPrefix.replace(/^\\/|\\/$/g, '')}`\n  }\n  \n  // Make sure siteUrl doesn't have an ending forward slash\n  if (config.siteUrl.substr(-1) === '/') config.siteUrl = config.siteUrl.slice(0, -1)\n  \n  // Make sure siteRss has a starting forward slash\n  if (config.siteRss && config.siteRss[0] !== '/') config.siteRss = `/${config.siteRss}`\n  \nexport default config\n  ","import React, { Component } from 'react';\nimport './../styles/main.css';\n\ninterface P {\n\tmenuLinks: MenuLink[]\n}\n\ninterface S {\n\tscrolled: boolean\n}\n\nclass Navigation extends Component<P, S> {\n\n    constructor(props: P) {\n        super(props)\n        this.state = {\n           scrolled: false\n        }\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.navOnScroll)\n    }\n    \n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.navOnScroll)\n    }\n    \n    navOnScroll = () => {\n        if (window.scrollY > 20) {\n          this.setState({ scrolled: true })\n        } else {\n          this.setState({ scrolled: false })\n        }\n    }\n\n    render() {\n        \n        const { scrolled } = this.state\n        const { menuLinks } = this.props\n\n        return (\n            <>\n                <div className=\"hero-head\">\n                    <div className=\"container\">\n                        <nav className=\"navbar has-shadow\" role=\"navigation\" aria-label=\"main navigation\">\n                        <div className=\"navbar-brand\">\n                            <a id=\"unicorn-btn\" className=\"navbar-item\" href=\"https://mudassarali.com/unicorn\" title=\"Click me!\"><span>ðŸ¦„</span></a>\n                            <a role=\"button\" className=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\">\n                                <span aria-hidden=\"true\"></span>\n                                <span aria-hidden=\"true\"></span>\n                                <span aria-hidden=\"true\"></span>\n                            </a>\n                        </div>\n                        <div className=\"navbar-menu\">\n                            <div className=\"navbar-end\">   \n                            {\n                                menuLinks.map(link => (\n                                    <a className=\"navbar-item is-tab\" key={link.name} href={link.link} >{link.name}</a>\n                                ))\n                            }\n                            </div>\n                        </div>\n                        </nav>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Navigation\n","import React from 'react'\nimport config from './../constants/SiteConfig'\nimport './../styles/App.css'\nimport Navigation from './../components/Navigation'\n\nfunction App() {\n\n      return (\n            <>\n            <Navigation menuLinks = { config.menuLinks } />\n            </>\n        );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}